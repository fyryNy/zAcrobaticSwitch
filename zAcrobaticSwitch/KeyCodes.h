// Supported with union (c) 2020 Union team
// Union HEADER file

namespace GOTHIC_ENGINE {
		std::map<string, int> NameToKey =
		{
			{ "KEY_ESCAPE", KEY_ESCAPE },
			{ "KEY_1", KEY_1 },
			{ "KEY_2", KEY_2 },
			{ "KEY_3", KEY_3 },
			{ "KEY_4", KEY_4 },
			{ "KEY_5", KEY_5 },
			{ "KEY_6", KEY_6 },
			{ "KEY_7", KEY_7 },
			{ "KEY_8", KEY_8 },
			{ "KEY_9", KEY_9 },
			{ "KEY_0", KEY_0 },
			{ "KEY_MINUS", KEY_MINUS },
			{ "KEY_EQUALS", KEY_EQUALS },
			{ "KEY_BACK", KEY_BACK },
			{ "KEY_TAB", KEY_TAB },
			{ "KEY_Q", KEY_Q },
			{ "KEY_W", KEY_W },
			{ "KEY_E", KEY_E },
			{ "KEY_R", KEY_R },
			{ "KEY_T", KEY_T },
			{ "KEY_Y", KEY_Y },
			{ "KEY_U", KEY_U },
			{ "KEY_I", KEY_I },
			{ "KEY_O", KEY_O },
			{ "KEY_P", KEY_P },
			{ "KEY_LBRACKET", KEY_LBRACKET },
			{ "KEY_RBRACKET", KEY_RBRACKET },
			{ "KEY_RETURN", KEY_RETURN },
			{ "KEY_LCONTROL", KEY_LCONTROL },
			{ "KEY_A", KEY_A },
			{ "KEY_S", KEY_S },
			{ "KEY_D", KEY_D },
			{ "KEY_F", KEY_F },
			{ "KEY_G", KEY_G },
			{ "KEY_H", KEY_H },
			{ "KEY_J", KEY_J },
			{ "KEY_K", KEY_K },
			{ "KEY_L", KEY_L },
			{ "KEY_SEMICOLON", KEY_SEMICOLON },
			{ "KEY_APOSTROPHE", KEY_APOSTROPHE },
			{ "KEY_GRAVE", KEY_GRAVE },
			{ "KEY_LSHIFT", KEY_LSHIFT },
			{ "KEY_BACKSLASH", KEY_BACKSLASH },
			{ "KEY_Z", KEY_Z },
			{ "KEY_X", KEY_X },
			{ "KEY_C", KEY_C },
			{ "KEY_V", KEY_V },
			{ "KEY_B", KEY_B },
			{ "KEY_N", KEY_N },
			{ "KEY_M", KEY_M },
			{ "KEY_COMMA", KEY_COMMA },
			{ "KEY_PERIOD", KEY_PERIOD },
			{ "KEY_SLASH", KEY_SLASH },
			{ "KEY_RSHIFT", KEY_RSHIFT },
			{ "KEY_MULTIPLY", KEY_MULTIPLY },
			{ "KEY_LMENU", KEY_LMENU },
			{ "KEY_SPACE", KEY_SPACE },
			{ "KEY_CAPITAL", KEY_CAPITAL },
			{ "KEY_F1", KEY_F1 },
			{ "KEY_F2", KEY_F2 },
			{ "KEY_F3", KEY_F3 },
			{ "KEY_F4", KEY_F4 },
			{ "KEY_F5", KEY_F5 },
			{ "KEY_F6", KEY_F6 },
			{ "KEY_F7", KEY_F7 },
			{ "KEY_F8", KEY_F8 },
			{ "KEY_F9", KEY_F9 },
			{ "KEY_F10", KEY_F10 },
			{ "KEY_NUMLOCK", KEY_NUMLOCK },
			{ "KEY_SCROLL", KEY_SCROLL },
			{ "KEY_NUMPAD7", KEY_NUMPAD7 },
			{ "KEY_NUMPAD8", KEY_NUMPAD8 },
			{ "KEY_NUMPAD9", KEY_NUMPAD9 },
			{ "KEY_SUBTRACT", KEY_SUBTRACT },
			{ "KEY_NUMPAD4", KEY_NUMPAD4 },
			{ "KEY_NUMPAD5", KEY_NUMPAD5 },
			{ "KEY_NUMPAD6", KEY_NUMPAD6 },
			{ "KEY_ADD", KEY_ADD },
			{ "KEY_NUMPAD1", KEY_NUMPAD1 },
			{ "KEY_NUMPAD2", KEY_NUMPAD2 },
			{ "KEY_NUMPAD3", KEY_NUMPAD3 },
			{ "KEY_NUMPAD0", KEY_NUMPAD0 },
			{ "KEY_DECIMAL", KEY_DECIMAL },
			{ "KEY_OEM_102", KEY_OEM_102 },
			{ "KEY_F11", KEY_F11 },
			{ "KEY_F12", KEY_F12 },
			{ "KEY_F13", KEY_F13 },
			{ "KEY_F14", KEY_F14 },
			{ "KEY_F15", KEY_F15 },
			{ "KEY_KANA", KEY_KANA },
			{ "KEY_ABNT_C1", KEY_ABNT_C1 },
			{ "KEY_CONVERT", KEY_CONVERT },
			{ "KEY_NOCONVERT", KEY_NOCONVERT },
			{ "KEY_YEN", KEY_YEN },
			{ "KEY_ABNT_C2", KEY_ABNT_C2 },
			{ "KEY_NUMPADEQUALS", KEY_NUMPADEQUALS },
			{ "KEY_PREVTRACK", KEY_PREVTRACK },
			{ "KEY_AT", KEY_AT },
			{ "KEY_COLON", KEY_COLON },
			{ "KEY_UNDERLINE", KEY_UNDERLINE },
			{ "KEY_KANJI", KEY_KANJI },
			{ "KEY_STOP", KEY_STOP },
			{ "KEY_AX", KEY_AX },
			{ "KEY_UNLABELED", KEY_UNLABELED },
			{ "KEY_NEXTTRACK", KEY_NEXTTRACK },
			{ "KEY_NUMPADENTER", KEY_NUMPADENTER },
			{ "KEY_RCONTROL", KEY_RCONTROL },
			{ "KEY_MUTE", KEY_MUTE },
			{ "KEY_CALCULATOR", KEY_CALCULATOR },
			{ "KEY_PLAYPAUSE", KEY_PLAYPAUSE },
			{ "KEY_MEDIASTOP", KEY_MEDIASTOP },
			{ "KEY_VOLUMEDOWN", KEY_VOLUMEDOWN },
			{ "KEY_VOLUMEUP", KEY_VOLUMEUP },
			{ "KEY_WEBHOME", KEY_WEBHOME },
			{ "KEY_NUMPADCOMMA", KEY_NUMPADCOMMA },
			{ "KEY_DIVIDE", KEY_DIVIDE },
			{ "KEY_SYSRQ", KEY_SYSRQ },
			{ "KEY_RMENU", KEY_RMENU },
			{ "KEY_PAUSE", KEY_PAUSE },
			{ "KEY_HOME", KEY_HOME },
			{ "KEY_UP", KEY_UP },
			{ "KEY_PRIOR", KEY_PRIOR },
			{ "KEY_LEFT", KEY_LEFT },
			{ "KEY_RIGHT", KEY_RIGHT },
			{ "KEY_END", KEY_END },
			{ "KEY_DOWN", KEY_DOWN },
			{ "KEY_NEXT", KEY_NEXT },
			{ "KEY_INSERT", KEY_INSERT },
			{ "KEY_DELETE", KEY_DELETE },
			{ "KEY_LWIN", KEY_LWIN },
			{ "KEY_RWIN", KEY_RWIN },
			{ "KEY_APPS", KEY_APPS },
			{ "KEY_POWER", KEY_POWER },
			{ "KEY_SLEEP", KEY_SLEEP },
			{ "KEY_WAKE", KEY_WAKE },
			{ "KEY_WEBSEARCH", KEY_WEBSEARCH },
			{ "KEY_WEBFAVORITES", KEY_WEBFAVORITES },
			{ "KEY_WEBREFRESH", KEY_WEBREFRESH },
			{ "KEY_WEBSTOP", KEY_WEBSTOP },
			{ "KEY_WEBFORWARD", KEY_WEBFORWARD },
			{ "KEY_WEBBACK", KEY_WEBBACK },
			{ "KEY_MYCOMPUTER", KEY_MYCOMPUTER },
			{ "KEY_MAIL", KEY_MAIL },
			{ "KEY_MEDIASELECT", KEY_MEDIASELECT },
			{ "KEY_BACKSPACE", KEY_BACKSPACE },
			{ "KEY_NUMPADSTAR", KEY_NUMPADSTAR },
			{ "KEY_LALT", KEY_LALT },
			{ "KEY_CAPSLOCK", KEY_CAPSLOCK },
			{ "KEY_NUMPADMINUS", KEY_NUMPADMINUS },
			{ "KEY_NUMPADPLUS", KEY_NUMPADPLUS },
			{ "KEY_NUMPADPERIOD", KEY_NUMPADPERIOD },
			{ "KEY_NUMPADSLASH", KEY_NUMPADSLASH },
			{ "KEY_RALT", KEY_RALT },
			{ "KEY_UPARROW", KEY_UPARROW },
			{ "KEY_PGUP", KEY_PGUP },
			{ "KEY_LEFTARROW", KEY_LEFTARROW },
			{ "KEY_RIGHTARROW", KEY_RIGHTARROW },
			{ "KEY_DOWNARROW", KEY_DOWNARROW },
			{ "KEY_PGDN", KEY_PGDN },
			{ "KEY_CIRCUMFLEX", KEY_CIRCUMFLEX }
		};

		std::map<string, int> NameToLogicalKey =
		{
			{ "GAME_LEFT", GAME_LEFT },
			{ "GAME_RIGHT", GAME_RIGHT },
			{ "GAME_UP", GAME_UP },
			{ "GAME_DOWN", GAME_DOWN },
			{ "GAME_ACTION", GAME_ACTION },
			{ "GAME_SLOW", GAME_SLOW },
			{ "GAME_ACTION2", GAME_ACTION2 },
			{ "GAME_WEAPON", GAME_WEAPON },
			{ "GAME_SMOVE", GAME_SMOVE },
			{ "GAME_SMOVE2", GAME_SMOVE2 },
			{ "GAME_SHIFT", GAME_SHIFT },
			{ "GAME_END", GAME_END },
			{ "GAME_INVENTORY", GAME_INVENTORY },
			{ "GAME_LOOK", GAME_LOOK },
			{ "GAME_SNEAK", GAME_SNEAK },
			{ "GAME_STRAFELEFT", GAME_STRAFELEFT },
			{ "GAME_STRAFERIGHT", GAME_STRAFERIGHT },
			{ "GAME_SCREEN_STATUS", GAME_SCREEN_STATUS },
			{ "GAME_SCREEN_LOG", GAME_SCREEN_LOG },
			{ "GAME_SCREEN_MAP", GAME_SCREEN_MAP },
			{ "GAME_LOOK_FP", GAME_LOOK_FP },
			{ "GAME_LOCK_TARGET", GAME_LOCK_TARGET },
			{ "GAME_PARADE", GAME_PARADE },
			{ "GAME_ACTIONLEFT", GAME_ACTIONLEFT },
			{ "GAME_ACTIONRIGHT", GAME_ACTIONRIGHT },
			{ "GAME_LAME_POTION", GAME_LAME_POTION },
			{ "GAME_LAME_HEAL", GAME_LAME_HEAL }
		};

		int GetKey(string keyName)
		{
				if (auto it = NameToKey.find(keyName); it != NameToKey.end())
				{
						return it->second;
				}

				return Invalid;
		}

		int GetLogicalKey(string keyName)
		{
				if (auto it = NameToLogicalKey.find(keyName); it != NameToLogicalKey.end())
				{
						return it->second;
				}

				return Invalid;
		}
}